#!/usr/bin/env node

import { execSync } from 'child_process';
import { readFileSync, existsSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ devchrome-mcp...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
    'package.json',
    'mcp_server.js',
    'README.md',
    'LICENSE',
    '.npmignore',
    '.gitignore'
];

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...');
for (const file of requiredFiles) {
    if (existsSync(join(__dirname, file))) {
        console.log(`‚úÖ ${file}`);
    } else {
        console.error(`‚ùå ${file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!`);
        process.exit(1);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json...');
try {
    const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
    
    const requiredFields = ['name', 'version', 'description', 'main', 'bin'];
    for (const field of requiredFields) {
        if (packageJson[field]) {
            console.log(`‚úÖ ${field}: ${packageJson[field]}`);
        } else {
            console.error(`‚ùå ${field} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!`);
            process.exit(1);
        }
    }
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
    process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...');
try {
    execSync('node -c mcp_server.js', { stdio: 'inherit' });
    console.log('‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ mcp_server.js');
    process.exit(1);
}

// –°–æ–±–∏—Ä–∞–µ–º –ø–∞–∫–µ—Ç
console.log('\nüì¶ –°–±–æ—Ä–∫–∞ npm –ø–∞–∫–µ—Ç–∞...');
try {
    execSync('npm pack', { stdio: 'inherit' });
    console.log('‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø–∞–∫–µ—Ç–∞');
    process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ...');
try {
    const result = execSync('npm pack --dry-run', { encoding: 'utf8' });
    console.log(result);
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–∫–µ—Ç–µ');
}

console.log('\nüéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ package.json (–∞–≤—Ç–æ—Ä, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)');
console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm login');
console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm publish');
console.log('\nüìñ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ PUBLISH.md'); 